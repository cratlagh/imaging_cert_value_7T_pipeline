#!/bin/bash
#
## Written by K. Garner, based on http://reproducibility.stanford.edu/bids-tutorial-series-part-1b/
# start

# manual preprocessing steps required prior to running this script
# 1. make sure each participant's folder contains only the 1 denoised mp2rage image 
# NOTE: some mp2rages were reconstructed. In this case, the original mp2rage is manually moved
# to a zip folder in the participant's original data folder
# 2. make sure any duplicate runs are similarly archived

set -e # this command causes the script to exit on error
####################################################################################################
#### Defining pathways
####################################################################################################
rawloc=~/Desktop/neurodesktop-storage/data/source/
outpath=~/Desktop/neurodesktop-storage/data/
niidir=~/Desktop/neurodesktop-storage/data/source/
logdir=~/Desktop/neurodesktop-storage/data/logs/
####################################################################################################

# ####################################################################################################
# #### copy over data from collection to scratch
# ###################################################################################################
# subjs=(1)
# ses=(2)

# for subj in "${subjs[@]}"; do
    
#     for sess in "${ses[@]}"; do
#         raw_fName=$(find ${rawloc}/ -name "sub-0${subj}_CS*") # this will obvs change later
#         echo "${raw_fName}"
#         if [ -z "${raw_fName}" ]
#         then 
#             echo "raw files folder not found"
#             exit 1
#         fi
#         echo "${outpath}"
#         if [ -z "${outpath}" ]
#         then 
#             echo "output path not found"
#             exit 1
#         fi
#         rsync -rv "${raw_fName}" "${outpath}"
#     done
# done


# # ##################################################################################################
# # ## Anatomical Organization ####
# # ##################################################################################################
subjs=(1)
ses=(2)
fname=("*mp2rage_0.75iso_7t_uni-den")

for subj in "${subjs[@]}"; do
    
    for sess in "${ses[@]}"; do
    echo "Processing subject $subj session $sess"

    ###Create structure at the same level as the source data
    mkdir -p ${niidir}sub-0${subj}/ses-0${sess}/anat

    ### extract images of interest
    for z in *mp2rage_*_uni-den.zip; do
        # get folder name for subjects dcm data
        dcm_fName=$(find "${niidir}" -name "sub-0${subj}_*") 
		echo  "${dcm_fName}"
        # unzip to the subject folder that has been created in source
        unzip -d "${niidir}sub-0${subj}/ses-0${sess}/anat" "${dcm_fName}/${z}" 
    done

    # # convert to nii + BIDS and then remove the images that were extracted
    # extract to the new sub folder that is at the source level give it the basic filename and 
    ./dcm2niix -o ${niidir}sub-0${subj}/ses-0${sess}/anat -f sub-0${subj}_ses-0${sess}_T1w ${niidir}sub-0${subj}/ses-0${sess}/anat
    rm ${niidir}sub-0${subj}/ses-0${sess}/anat/*/*.ima  # this may not work across subjects beyond #1 as the mp2 rage was received differently
    rm -r ${niidir}/sub-0${subj}/ses-0${sess}/anat/MP2RAGE_denoised/ 

done
done

# ####################################################################################################
# #### Functional Organisation ####
# ####################################################################################################

subjs=(1)
ses=(2)
runs=(1 2 3)

for subj in "${subjs[@]}"; do

    for sess in "${ses[@]}"; do

        mkdir -p ${niidir}/sub-0${subj}/ses-0${sess}/func

        for run in "${runs[@]}"; do
            
            # get the filename for this run for finding
			z=$(printf '*cmrr_att_learn_run0%d.zip' "${run}")
            fname=$(find ${niidir}sub-0${subj}_*/${z})
            fname=$(printf ${fname})
            echo "print fname ${fname}"
            new_name=$(basename ${fname})
            new_name=$(echo $new_name | rev | cut -f 2- -d '.' | rev)

			#echo "printing new name ${new_name}"
            unzip "${fname}" -d "${niidir}sub-0${subj}/ses-0${sess}/${new_name}"
            ./dcm2niix -o ${niidir}sub-0${subj}/ses-0${sess}/func -f sub-0${subj}_ses-0${sess}_%p ${niidir}sub-0${subj}/ses-0${sess}/${new_name}
            # remove the folder
            rm -r ${niidir}sub-0${subj}/ses-0${sess}/*_cmrr_att_learn_run*
        done
    done
done

# # now the physiological data
for subj in "${subjs[@]}"; do

    for sess in "${ses[@]}"; do

        for run in "${runs[@]}"; do
            
			z=$(printf '*cmrr_att_learn_run0%d_physiolog.zip' "${run}")
            fname=$(find ${niidir}/sub-0${subj}_*/${z})
            fname=$(printf ${fname})
            new_name=$(basename $fname)
            new_name=$(echo $new_name | rev | cut -f 2- -d '.' | rev)
            echo "$new_name"
            unzip ${fname} -d ${outpath}/sub-0${subj}/ses-0${sess}/func/${new_name} 
#			./dcm2niix -o ${niidir}/sub-0${subj}/ses-0${sess}/func -f sub-0${subj}_ses-0${sess}_physiolog_%p ${niidir}/sub-0${subj}/ses-0${sess}/${new_name}
                
        done
    done
done

# # # # ####################################################################################################
# # # # #### Remove unneeded files ####
# # # # ####################################################################################################

for subj in "${subjs[@]}"; do

    rm -rv ${niidir}/sub-0${subj}_*       
done